%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 566.000000 330.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 566 330
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 566 330
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: SourceCodePro-Regular
%!FontType1-1.0: SourceCodePro-Regular 1.0000.1.0100
14 dict begin
/FontName /SourceCodePro-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /r put
dup 34 /e put
dup 35 /q put
dup 36 /u put
dup 37 /s put
dup 38 /t put
dup 39 /p put
dup 40 /o put
dup 41 /n put
dup 42 /underscore put
dup 43 /I put
dup 44 /R put
dup 45 /a put
dup 46 /c put
dup 47 /d put
dup 48 /b put
dup 49 /y put
dup 50 /i put
dup 51 /v put
dup 52 /m put
dup 53 /l put
dup 54 /g put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -25 1 index div -285 2 index div 706 3 index div 952 5 -1 roll div]cvx def
/sfnts [<





B0002B00B20101022B01B20201022B01B70240362A211400082B00B7014D4032241700082B00B20307072BB00020457D6918444BB0605258B0011BB00059B0018E000000
00>] def
/CharStrings 23 dict dup begin
/.notdef 0 def
/I 1 def
/R 2 def
/a 3 def
/b 4 def
/c 5 def
/d 6 def
/e 7 def
/g 8 def
/i 9 def
/l 10 def
/m 11 def
/n 12 def
/o 13 def
/p 14 def
/q 15 def
/r 16 def
/s 17 def
/t 18 def
/u 19 def
/v 20 def
/y 21 def
/underscore 22 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-25 -285 706 952} readonly def
/UniqueID 4158941 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB281E14745AF3F10450EAAB791828BD7007DC687000C5DB246371EAE0DB47443515627C46444C7E0097B0824A6536904C34F1CED6B721F46FB4A905A1EDE355144A4A7DBB5032D7528D0497F99CA66E4139D55E6A7A423D359CBEFB54A0ABB80EABB36AC97655FF47AA528340E495EBBC5ECC986C96F5B15D5222D9F89A75A74105AB17FF86FEB25A957CBC4FD6AE9215B8DD683503FA32234F978DB5A08D466227EB11DE9C9428EA025D4EE3B9FF2AA1E7D37B565CFF233AFA557CF90D105D386559FE290038126B2D34EBCF09A13E643701D60516DE922FEEFF0D2A500E4DE8C3726CB67EC79803816E1CE4E1DE47038509A6FCE91C2931868AC01954BE5EC101024B48260828B58073DE772A68789DD614E7665CEE84AF9655D854EDFB7E151AB5170AB6D36A29ED7292BA1D7B96422026334854B99296FCBA79DC23413382249DFF3D8C3F919162F33CAF6001CD1CDF141F7129C7F85C6D2E89710310CAF7FB3F51933993FF14C72041F21DECC17FC4C65E6AF5D4755FCF2EDA66ED62A744F8A775D5F91ADF7C476D86BB2565F92BD269730F96F8D1D268BA49E7C7FABA9AA2F51F1EE549854BDD7466AE0ACD0C95D6D40D0B2F46022B5716B2AF7C7E04A36CEFAAB0A5F4EE53130870F02F0F205AC18554D07949630D1150F5583CA207B6E5CB89D17544138F37D6ED8267A0D7962784AB9F375DD36A8C40DBED9BC5698D4E4FDE8826D2A49330A7AF93E9E4A1607265B66318592BDBE4C6499161997CF65137199AC
A7A5EAED428CFD478FE4691E44CC622520D85DAEE3CA2E5D43F26A783D8F0762021AB9F435C78A2EE5951DD2E8EFB5CD9C0B474ABD80236ED4741C451AE0C24A8B56039566050BCE98A9FA1FBE877D3911C923AEC68C553C00C7647B5AB4B5E8924446B138A27B5ED522905E7472C68F891AA516A3CB2C1116FB110AEDD42C36905089E7D3E7536983A697A3B5BBE03263CA8CC264219C03A839523CEADDA58266B2FFD9ACBC565F0F64DF689AD88259700583063814CAAEEEF53076872F7608348B85BB323FE2095D4BFF1E2FBDA38AFC6ED35C4D3BDEC12C0C8B6297BBC70FED602ED5592FDD3D1741BBD5851CBEA657EEF1DDE5674FF9271D193951C0ED808348C0889A6D1BE4920073378DEDC57953F22D38D8A88975233D6DBA0D833D7FD3451E824ED7F8F25C64ACA453868BFADF220CD410E572E7AFB40C49FB7A79165BEBE59CCA8A98BA93DE338388BD6BD725A58B7397CB708F91D7C141F96438903ED2ECCC31BB4C6DB23AB012CDD3D384E2BD69E614CBE9664A485893E331C15482330809642B355F4F505BF720F0F349139FE1C01699612218015922359EDDE201D78AF679D6682FBD75539EBC6100F865D4B9A1AC5C5552015862FAAA49C903B8ED2AFCAA1E1032639D9BA17C76C9D76F652A7CA7CE668492977C2A99B713EAFE485BBCD632BCFBF038F06CB2D257C3BD139CE07476EE9853B03F08313AE253BEEA531A514F35E021F7037C48BFADC11078E0E2BB39625BA12775E894026627252C0F77360534AB160973F96FC476C00C382AA8DB5F58DC9FB4F10BD33A9A8C7BD0223732857DAACA6D581A231EBE2919E03555D96BA8E8886F2D78D7E320389BF7A1A4AAB8D2A6C18ACF8DA5A0C86FB8107E980930233AB86E4228BAB1057341B4A6BF02839BCF2A7C2A01AFA256B78DFD4BC934B92727312EDD3958ECE368ADE8A1257A29915745A9BD1DA23A2C2114D26432C7D7E26B3EC4D4491F34ABA584C48A5286224491BCBD9AB2FE225DA47D7FBE551C19B40EFCCE091758384D2A65A59BA2172E4F1D4C3D47F8FEA4D7996EFCA52E39000F4BEDAD0DFA3349A022B814D4CCAB6116E31DB80864E819A865B4CCA78B926C4BFCB308DFBBE383BE97ABF6D13132EA3832DCC5D40438DE1F48E057D3888A9CC7619E736A3958561CCCD635CA50921A8F0014B779E31CDE60910FCBB9E06F2BAE981C0EADD5B8DA7BD5B102E4DE419421116736D1E01B5F77FBBF65453A02627CC2D91EDF1505EFB8E3A642A14D82AA90C136798A45F199E75FD72BB93BC46D5D81FAA3F9C924C42AE3E61DB96AEAAC3B6DDA5F686D786907F0E46DE74FA092F84FE4605ACBEE765014A250C89393B94E5ABA71ECC6E4A4F5A58E87FF53DB126A55A7FB8D4433926B5F6651B88ADACAFA0540CB5422E9DE723861FECB952CEBCC41A55F84092B084FF0
A2590502A66C5B68106BFE132866BA0DEC9D2405F916C26D0B97DD5A0560A615DEBBB96574D5E813BED05AD71F50A168266762E5791CC4D2CBC287EEF254FBD9DB731D5910B3071AFF3ABB60FE94F04FD5481188483DDFF1E51FD1731EF09E03DA16D22AAAF2AFEBAB585C9D2A42810EA28A7D3C57F1CBE5E1F774244A65095193F1B43658910B09DFD1AC63096AD694785C65FB7AF9DD3B24F982A7B89F775AA1C63407C750AB4FE980CB9B5C8CB3A661A1113470D40E0CBC8037E68A5FC3D96C0BAEDE2C9EE293E230C85B5112D3A3A6DD4ED5C6F283EFBCAC2BAE8F814BFD604DFCFCC1466260C0FFFDA9D690B5E5A49D28EA03F1A1E4AAE749F2CA113150BF1BB466015700A49C43231B03F96C1D5E65991F5D85977744548423E145AE5CACB9CEE3CA7A30F5FFBFE9AFF97B7FF86D87B9080C986E21BAD069B1F627C429CE14D8C580CC94DD2D82FEA3695F020705A7D306D37F92165B6AB4DA22DA39CFD7FCF2FC7D960B0C9AF69C24D4DEF6A1EF27D05BF540BC989FDB5A30469AFC4EF75ECC60BE680F7D3EB4135C1A8BB188612D218D8903C0092D5C16B1826017AED0F59A61718DFA47A5AA0E6F5B89377F6CBB460B5A1A439991C95BF79DE6CC9C514040899DFFFBB2A92726DF0B6D82CE94556488E6A703ABD0A1E3A7D81B386E3D5202B5AD8D57A78085DE08119711E2655725320D39B0871DDBAC8FC9C23C3A8E4BA2DC86020AD8C3A0A3DD86837A0BB367AAF6B5FEBBF0853CF97753049CAE330631F7BD6E36F7E8A866CA599DBFB5EA12AF5BAC96D35EE3803D646B2D3477311123EDD73AEDF27236C345047B16C11E91CF1321BB46C74F127A17379B0E90587121D006C80A519FB5C919B732D47F402575D94C66344D43E06F9704B1FFBC0AA11AAFB76C165AC7ABEA7DFA2E10DF3F164647932F0904C50A497E064728037B4B265C18661305F210205ED3FE11F2646996CDDC206FD81357052A3B022BF10244B09A444BD7FEF565D58D4A15E8D30FD2D47ECDFBA4BEED0D81EC25AF3F6EDD65ED0B6B70E4F1EF72228EDFA80262A76B5853666ADCBDC15EA1AB1B58CD791CBA2BC0DCD62DB1456811EFF48930038CFE0139FD230895AC8DA3D0D0A166F079DD888A4ABEE062FF0E2A9091991959222FD7FD2BC43A6D27EA9462EA083DFE86DAB2DF0CAD34CE06C69CF8617B3AD07B4184E7D799B874D0FE589D2B1B99777152225F3862F747C879741D68E338323949DE192226981335C4AC93EECE7D80EAD38363E28D3E684766F0FD4B2668068376C00692F5D78F736767D76BE3C19EA08722E1569B2DA702D157EE6BC442283320CBEEDFB3F779CA577F5EE7840199307F6ABF3CC36FDD78E34E96A9427C6196092AD9E355B5D49E23840EC87975BD1AFCB0CBA14E4D52353F7BE378B1A9123AEAFF4692BF50599529970F21158331
CF4F8B9683D4DC6E58A291AAA41E205A1BA7BFF6FE12AC4EEECA099F2014FA5E5F4E4FB62C411FE6B4EEEE76671D40127F2AFC4F66244DFBDA14D7954992294282CC6A06F7BCD69350CEDB25B7105169B6C9660EA66E2358E088CC2067109C23AF2E8B9E6C0D41B0A18F020534963F7B3651C61964BB03577DBFBC9556BD52302E9F3D3C2A777CB45E06D1B89CFCB0A3DE8A67DCBA30D1D9A6146DAE104CDA28877B03B2B229C40B1D1920F9C3131E7AC5D13E83399D2A680B9B42A79C70016ACCAAFB5039CCEA6392A6F60585442922AAE3D0ED72EE1181244D133F61EA745108AFBF56C8086162F9C1F5DAA64B07F3DA3CB591F3DD22713497F9615F348498EB95A4968AFAC195D1D29CFAC608023AC107A4BB45A84D141252FEA7B9D9A66D236DBCBD7479279261B45C4993B23AA57B8A886EE7260D520F545D4C5DB61CF47190CCD5683144EB6A50A66FF8213B593C00197FFE7CD500BAC209FE369B204D0220763850EF94419CD4368338AB5C4DDA1C006D81DF38AFC6A3430BC915C42AFE18B17759EA0AEC9D248DCDF93F57ECE681EFC6A3F87D8F4B1B71B8DD544FE83DCA5C519B07EBF6613BB55C0CFA6BC3650E03C8F359B45E5977E23B21AC6FFD974291934A6F2D1A2EE594D3CEA6981573CA586F4DF5E846794E329F4787158DE281C72A1452786A0EA367718D105CD7D91AE08024A0B44C4B279F02B27BDE4D38D2C0AD29C853DBEA66215AAB5711466D8787C53653FE8DA68B6BA40DCCBAC454851159947C058C6B77B84A05DFF136A3579F743DD826FD1ADCF223EB3EFD6201DD09598FCEA56E95C260EB406438E8B637CC7439EECC3146E88748837B172447B65FC344C8A6E38E5ED79FCBF7885F63EA025657FBBC09DDA124BE11DCCC534828C06E37CFF903769D94E9E8FC4F75C8EB69EA5B6D0803A310A3FDEEA396F01DE15B952B6FB633894FEE7272D5C7C9BFE2B31DD637BFBDD6A0ED656FB3BA4CE8ADD4DE33CD058F298195EC209EC0D18152F78F149FF7CA7C4312516E48D5CC8F6E8285A1270081957BBD4CD263E48413364FF64D9344335C97341A2A540D483FB7E93064134E6AB5ADFC0E5AF692F770375180D0405555685351851329352382D87C4584A43C2FCDC1D3FA443F78981B518DE0C8B25718784BF7E629A92FEF956A56AC45A7723B661E9293BE96E746A17A622D46076948567114F1BE7404040ADFEB8C1E3B68A1C4078EAEE66136B346A42E860DD62695C7EBE99E2388EDD2B380F298526363DB325DDD4304DDB3C20F810CE8E01FF9E213511E8873F95C3FC58633C61618477F91E9D7BBEC00F320285760FD13192C89ADACCAB2EA56F59877FBA50215AB7F526A281B7A2C0437E7B284E07EAC7C4475AA5833FD6188A39E2C20865C4D63DBEC13F3207FD24FD00C8A8A24F3D7EBDE0EF7C21D744A64C6C1
E4B3B36FE63B549CB777B38B864F196447337388714089845558B7D41EBD25BC41041C7B524940A8F34EF145D41AC44BDF3E0145836CFDFCF95677973018AD0D2ECF7B2412C6B9B4C36B7845EA5779DE370382F03FAEC4F737851815AA1DA86187265DFDF6BCABA40AF037A0C0A9BEAF7781EE7403171C3ECCBC034A22762DCF0C8D14E201120C054C461DEA3DF80B7D1BAA1D1CDD3EA41CB51E32DE6A7CD7CEDCA5469ADA4952A6D3F4DB43E50DE89EA876DC079A9C6F0C9BF758E28AAB5AFF3BB9551332F4135C067179F99633AA6847AC440ED3A6F57199F20665D96D77C319675DAE1E5A869AA6D4DE55219D80814A6142D1E8FE12B36F857D95F02E93C6C5D946EF8851935F43C70BBD9C3A357107A9F94FE547D1A34475381B7216303F23E8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/SourceCodePro-Regular cguidfix
/F1.1/SourceCodePro-Regular renmfont
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /V put
dup 34 /a put
dup 35 /l put
dup 36 /i put
dup 37 /d put
dup 38 /t put
dup 39 /o put
dup 40 /r put
dup 41 /T put
dup 42 /e put
dup 43 /s put
dup 44 /space put
dup 45 /H put
dup 46 /n put
dup 47 /E put
dup 48 /v put
dup 49 /m put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<




07070D131D1614190F06091421192F3F250F1123382732381F11152221181F10060A1727000100090000011D02A00017005BBA0001000200032BB8000110B8000210B80006D0B8000310B80007D0B8000210B80017DCB8000DD0B8000110B80014D000B800012FBA000F000C00032BB8000F10BA0004000500032BB8000410B80000D0B8000510B80015D030311335231523153311141E023B013523222E0235113335B65558580E1D2F21412714190E056702059B9B4BFEB7242C18094B030A120F01414B0000000001000E000001E602050007001900B800012FB800052FB800002FBA000400000001111239303121132303230323130129BD598D02915FC00205FE5101AFFDFB0001000000010000C051B47A5F0F3CF5011103E800000000B643600000000000DC4364C8FC49FE1F07C304350000000900020000000000000001000003B8FF2B001C08B1FC49FE8007C300010000000000000000000000000000001201F40033011600000263004E02D2004E023E00020263000002190024025100240219002400DE004500DE004503550040022C0040023E0024014D003D01F4001F013B000901F4000E000000480048007A00B600DC00FC020602A4030C0336035003EA043204D2050005A405F6061600000001000000120096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 18 dict dup begin
/.notdef 0 def
/space 1 def
/E 2 def
/H 3 def
/T 4 def
/V 5 def
/a 6 def
/d 7 def
/e 8 def
/i 9 def
/l 10 def
/m 11 def
/n 12 def
/o 13 def
/r 14 def
/s 15 def
/t 16 def
/v 17 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4111738 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB28298042BFC0D231F8B1B12E20417BFC4B622EE2640022E37E13610883BD1380519DDF12DD594359A857E37145AE90448F533B2FE00656EA0D10ED131ED434197FD6814745DB8252CD82342351D488797AFF1DBAE549AF57D6C4EEBDBC1B580CC79EA30B7E212817F95210E59B819EB4DC5BCAC2FE2E3AA9BE0CDBCCB7ADC4F202B0C1B663FEE5091E3605FDB1A7887EF6E30850AF5C4B41760D44FD219A65744AC1F3E2F47B20DB3C66DEEB3428C6C60EFBF03C3B672CD7FBE4C0B0CEF3AA4033609E0EE171BA08D4075DA4C2BFA3A59EC54AD5304B355F46804FB115235BB5BC2D520B03719142BC036647F257512208B4995716BA8455ADF1D02E0385EC17EE5BB2448F7F1C080B728B712327A59C85662262E36BE8AB5068F8E5BDCC4CB6A8B25EF5F0C591417B77B82A4B4879BFA7D691E5E727AD04B3C757740148D1C44DC8BFD607F7BE24C5285D61E7E3E917034A58531096A01EBC7C80ACFD63E943B1751BC4C3E3CDC10AB5C43AC05AE9A98801D378CF98D7481974D2AA2AFD2E321F91A14246C1582FC8D462DB91F8CD30860AFF3B88453527D65A00CB2B1CFB922A3E961251ACA72EB341A0E4D0B701D9A774B488B88421A6943DA5ECD90AA230B6D3FD5F77B89522F68911DDD2312F63B80096E60E457C9F75D3A20E5146AB3232B0A2CFBA64E04115BFFDCAE8BEA094807D1E32225E81770E3CDF2017FD492D6706855972D8D9F9174E4A810FE30032540C28E801020FC20317DCDE1EF3EAE92EBBB341B
757A8A387800F90E6731926FEA3D414252AFBA32AD294286729F747919F76C7132A37F6D181CADEB39D512BD33265A69C8A82AFA4934BEA29FF7D7091217275E2F7EDBC5E7683C4F1978F2EE787B8221F421CDC7A3299FDD14A57679038DCC7F5886E0F4BE8EA6874FFB90EC944B88AED727B723E83027CBDD1B3C8ECBDCF98249D2FBB1F31DBD07FCDC42DB1392041B2F4DA47F0760DBFD03F936EE4C2748DC84BB35661449E0688A69A2C200F41BD117A59C5DB683385E1E355BE65F7B22D0987DBD986D9156C72EB3CBE13FB4FD5982510E4460E7049E0F5DBE8F33451D2A2FBAE8366AF12EBA74EF1EF10EF2905F48FF51773AF7A0406D6F2A99D745F2DEFDA0D224F3D414912B34FCD915ED9940AEF40E06686E949EB44EB1B956A22F0BF8AD820503144006CB79B348B7F1FB81BA071E690985C01612ABA20FB6DDECEC014FBE10D313A69472D497C857A8894AFBE62A8A48A93C434CD6ECAEEB4891499C0B12F4BCCE5FAA76A0F5ACC747E35D9515E462F8929840D416F8A83A9E990DCF98950BE5B8F75F3B317B586C2DF88F5A0A4AA2072458B5B10C32B9BA9D0D8EB230A4BC5E78A387B0F00C90F4CC0C7AC9B386974FC52D03642ECC7DD34AFA540D381DFCE45800B9B84EB96ED4783C3E7F607A32B612EC804B71A8542354F4DB4847E231618E3DDA384691082F68CE9A3AB0DCF626247E4979426A632F935FAE96B018724A82814B65EBFC1CACE31E3F23660A8D1C89C63B8F877796A5AC2F17B7AD9699898E5CE5CEB95474B346094FEA0F1E0C53C7C8F8196F2FB9E100E8E9EFF333C514C84E5662CCDA0704AB48F213998DF22F708E0EA4ED05AEF004926CEB2EE9C13BD052C92B5CE0F9EFE2C45ACE007EBA9EDAA35974DFCFA524C8B31CCE46C443D4E4398D5C912E5EFB091F1A1A9A2DE31287000C0C146D029071FA0146069AC6A4C742AC68479AF9C00557201A9F672ED8A22D6153BA5F47594C5CD8A26A93C4192D3EB5CCF6BCE47E0BF41BE78E0083544978522EA0FB1954965094C1AF57C2053D7A4C9CC2EF2E60876B7562DA60834E1B0A98D3FB43F50B24C953C5AC8031324588E2C1F699A0C1B38BBB0B966F07A94610848B2BEA077084A3390D0F8A8AA76846CED0E93E548783636199AA710F01F9EED4B89854E1963CD0086789060BEAB7D2213C9936C4A5559DB380010E41C6026F2EBB748B924650AA72FDBE220E277EDC70F291E5FD34BE2B25E546A662E55F6DC5FD8606777A1E28D9F2C259CE90DFBA665E6E2F459296177DE7BF2C268158766A948B8A35268406BF0390171B71830DEC6A721662B2220ED2D3FC82EE1025823D7DE98EFB9D71FC8D288FC39D3DE8234126BC1C44BBF86D2E0F97C84C7B15D6343DD757D6878D621931C74E1344D3845466581E44409E1028BD0A61880CA8312E716AD45573CACDDC
5EFA24E7DCC5D730611AE389BAABF68BF7190132279DAB474E2E65E5D93838383439569D5463165FC38549CB2F806E81915CAF8059EBB25D497B7965560AA5D10691E96AD6312571092597A9214824809303A0BB0ACFDFB02AC548F8C1931DE3F200DC2567B7469F079FF30AE343A482C7FB8E87D71B179EC889F05D72684D8FA64D0843A978C510492F23EEB7EA676CDD63FFD1959B7E0DF99E41602DE8A6771D711E4EE4B6A0C4DC0225E22556F57A98EFACB9C92D6DA73680A2FB057D745F87277D7BB827E81E394A090BD43762DE81B04ACBF77964644AA08F9301496A151AE6C3DF5414512A8ADFB1F825D8BEACA43AA6C956CD54E93CC71FBF5076A8EFBFCDF3C336387B9252C86E5E4F9023B058316C13ADECA2A2395AECE987D94F45D0D46F8AD349B5DCFD7BC077DCE66A4FDB92CBEFD4A824E4CEA360229CBF93B47489410A4A4C2F4D440CD5D01FAD246C760764DAD878767819BC32274BC8B2010EBB4649236A21C68A6BF6018608E3A401E1BA31FB394A42E4F9917E739A0D905FDA573F2BDAE0E91D5E59DA2E7447A374E421F22BFA5EA4C5DA58A6A70009C35F2C843D6D2EE233B5B78C32545515D154C2BE24E2AED4EFD6053066C304CF3901EEBC73C46424EA94BE517AF24E92C39445ED977B2351DFA33658DAC0D574A30F24DAB36235F5B78233846F15A4FD86DD7C283DEB7CB73D67273F37828F0D7CC51FA68CD57C9EABD9D330006A3D7832902DD83A60D47DA9C8467BEFFA8F4F037C61B0CA26419B35891BBE48D6C84F7D27DFE5FAFB1CBEE4A94C66C7FFDB86875F03FCCDD40BA3746B1214FC6DD4FDAE48B296F95BEEF9A35ADEC8379542C65067E65E96661DEB7EEFEF654D889EE69A2AE2607A9CA2BABAC4CA041A23D97561E96B6927FC17A437F1461DEE880D3D522AD45E8654B3D201FE3723427A4A2EAC333E3D4EDDCDC5B0355ADE7BC3FB62FAE7FB484E3318E9DDB05A59BF764D863C8D2E0AD659987CA3CC9774E977B61F8F7201D8299B2AC2F1170BC328BE4692E261154E0EF515AB2B7E705856DFCAB98771EDCDC589B740C57E977AACA0981C6D863B252F0304FEB0E222DBD64D5CC15C4C9D3E6230426F691B210C2AC470D748D36831C13D0A37640CD4B10F25FAE388A340E27317B44595DE659496F98F8433535968FBC1302B33B72B3E4B54022F0C99C4E4BD7C220F57332D4DB594E2D2F618F06F103D53C119D9B6B45FFEF67A9FCF2111D9835F1993F2FB7418F0A6875A061FEE520B52C2A8CD02B4898666122A01E4C600F6F33903D319DA4F98B3681DC4A1F18966EA702281FAEECE316976853A908CF23234F8CB6638B551D9C9B3D889BF346A2DD5B065E4B096023606551E079AD25456
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F2.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 0 0 sc
q
0 0 566 330 rc
1 0 0 -1 235 179 cm
/F1.1[ 16 0 0 -16 0 0]sf
-33.600002 -94 m
(!"#$"%&)[ 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 0.000000 ] xS
-52.799999 106 m
(!"%'\(\)%"*+,)[ 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 0.000000 ] xS
76 6 m
(&!-.")[ 9.600000 9.600000 9.600000 9.600000 0.000000 ] xS
1 J
1 j
0.60000002 i
71 -2.2734439 m
56.197205 -5.1774788 38.5126 -11.487401 25 -25 c
10.191346 -39.808655 4.0333138 -59.628006 1.5284745 -75.173653 c
S
0 i
CM
235.55858 262.11401 m
233.55069 253.8093 l
239.50642 254.53677 l
h
235.55858 262.11401 m
f
0 J
0 j
1 0 0 -1 235 179 cm
0.55857122 -83.114021 m
-1.4493176 -74.809296 l
4.5064163 -75.536781 l
h
0.55857122 -83.114021 m
S
1 J
1 j
0.60000002 i
38.599998 -95.423203 m
51.016579 -91.868561 64.313087 -85.686913 75 -75 c
89.808655 -60.191345 95.96669 -40.371994 98.471527 -24.826347 c
S
0 i
CM
334.44144 195.88599 m
336.44931 204.1907 l
330.49359 203.46323 l
h
334.44144 195.88599 m
f
0 J
0 j
1 0 0 -1 235 179 cm
99.441429 -16.885983 m
101.44932 -25.190702 l
95.493584 -24.463219 l
h
99.441429 -16.885983 m
S
1 J
1 j
0.60000002 i
57.799999 87.697014 m
63.886703 84.40107 69.757355 80.242645 75 75 c
89.808655 60.191345 95.96669 40.371994 98.471527 24.826347 c
S
0 i
CM
334.44144 162.11401 m
330.49359 154.53677 l
336.44931 153.8093 l
h
334.44144 162.11401 m
f
0 J
0 j
1 0 0 -1 235 179 cm
99.441429 16.885983 m
95.493584 24.463219 l
101.44932 25.190702 l
h
99.441429 16.885983 m
S
105 -44 m
(-''"\)/)[ 9.600000 9.600000 9.600000 9.600000 9.600000 0.000000 ] xS
105 56 m
(-''"\)/)[ 9.600000 9.600000 9.600000 9.600000 9.600000 0.000000 ] xS
230 -94 m
(%"\)/*01&"%)[ 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 0.000000 ] xS
1 J
1 j
0.60000002 i
38.599998 -100 m
215.10001 -100 l
S
0 i
CM
458.10001 279 m
450.10001 282 l
450.10001 276 l
h
458.10001 279 m
f
0 J
0 j
1 0 0 -1 235 179 cm
223.10001 -100 m
215.10001 -103 l
215.10001 -97 l
h
223.10001 -100 m
S
112 -109 m
('!2\)&)[ 9.600000 9.600000 9.600000 9.600000 0.000000 ] xS
230 106 m
(!".3*01&"%)[ 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 0.000000 ] xS
1 J
1 j
0.60000002 i
225 100 m
67.699997 100 l
S
0 i
CM
294.70001 79 m
302.70001 76 l
302.70001 82 l
h
294.70001 79 m
f
0 J
0 j
1 0 0 -1 235 179 cm
59.700001 100 m
67.699997 103 l
67.699997 97 l
h
59.700001 100 m
S
109.8 121 m
('-!%")[ 9.600000 9.600000 9.600000 9.600000 0.000000 ] xS
-229.8 106 m
(!".3*!"%'\(\)%")[ 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 0.000000 ] xS
-220.2 -94 m
(%"\)/*!"#$"%&)[ 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 0.000000 ] xS
1 J
1 j
0.60000002 i
-38.599998 -100 m
-90.099998 -100 l
S
0 i
CM
136.89999 279 m
144.89999 276 l
144.89999 282 l
h
136.89999 279 m
f
0 J
0 j
1 0 0 -1 235 179 cm
-98.099998 -100 m
-90.099998 -97 l
-90.099998 -103 l
h
-98.099998 -100 m
S
1 J
1 j
0.60000002 i
-57.799999 100 m
-90.099998 100 l
S
0 i
CM
136.89999 79 m
144.89999 76 l
144.89999 82 l
h
136.89999 79 m
f
0 J
0 j
1 0 0 -1 235 179 cm
-98.099998 100 m
-90.099998 103 l
-90.099998 97 l
h
-98.099998 100 m
S
1 J
1 j
[
4
4
] 0 d
0.60000002 i
-79.400002 150 m
-79.400002 -150 l
S
186.2 150 m
186.2 -150 l
S
0 i
-210.60001 6 m
(4\(/"5*%&-&")[ 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 9.600000 0.000000 ] xS
-24.4 -19 m
(6"\))[ 9.600000 9.600000 0.000000 ] xS
[] 0 d
0.60000002 i
-100 -3.4113603 m
-77.236153 -6.717803 -52.080032 -13.035468 -33.200001 -25 c
-9.8515482 -39.79623 -1.8356839 -59.594757 0.49444413 -75.134521 c
S
0 i
CM
236.15839 262.10657 m
232.50476 254.38315 l
238.48407 253.88516 l
h
236.15839 262.10657 m
f
0 J
0 j
1 0 0 -1 235 179 cm
1.1583809 -83.106552 m
-2.4952357 -75.383141 l
3.4840636 -74.88517 l
h
1.1583809 -83.106552 m
S
/F2.1[ 16 0 0 -16 0 0]sf
-198.51199 170 m
(!"#$%"&'\()[ 8.896000 8.592000 3.552000 3.552000 9.488000 8.592000 5.040000 9.184000 0.000000 ] xS
7.5320001 170 m
(\)*+&,-"\(.*++)[ 7.408000 8.592000 8.000000 5.040000 4.448000 11.552000 8.592000 5.616000 8.896000 8.592000 8.000000 0.000000 ] xS
233.24001 170 m
(/.0$\('.1*.&)[ 9.776000 8.896000 8.000000 3.552000 5.040000 9.184000 8.896000 13.648000 8.592000 8.896000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
